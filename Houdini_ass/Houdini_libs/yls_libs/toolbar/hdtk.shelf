<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="set_ifd_path" label="Set IFD Path" icon="ROP_mantra">
    <script scriptType="python"><![CDATA[from toolbar import *
setifdpath.main()]]></script>
  </tool>

  <tool name="fit_cam" label="Fit Cam" icon="OBJ_camera">
    <script scriptType="python"><![CDATA[from toolbar import *
fitcam.main()]]></script>
  </tool>

  <tool name="buildropnet" label="Build Rop Net" icon="NETWORKS_rop">
    <script scriptType="python"><![CDATA[from toolbar import *
buildropnet.main()]]></script>
  </tool>

  <tool name="createnull" label="Create Null" icon="SOP_null">
    <script scriptType="python"><![CDATA[from toolbar import *
createnull.main()]]></script>
  </tool>

  <tool name="mergeselected" label="Merge Selected" icon="SOP_merge">
    <script scriptType="python"><![CDATA[from toolbar import *
mergeselected.main()]]></script>
  </tool>

  <tool name="openpath" label="Open Path" icon="SOP_file">
    <script scriptType="python"><![CDATA[import openpath
openpath.start()]]></script>
  </tool>

  <tool name="pyrobound" label="Pyro Bound" icon="SOP_bound">
    <script scriptType="python"><![CDATA[from toolbar import *
pyrobound.main()]]></script>
  </tool>

  <tool name="fbxabcpaste" label="FbxAbcPaste" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from toolbar import *
fbxabcpaste.start()]]></script>
  </tool>

  <tool name="fbxabccopy" label="FbxAbcCopy" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from toolbar import *
fbxabccopy.main()]]></script>
  </tool>

  <tool name="create_out" label="Create Out" icon="PLASMA_App">
    <script scriptType="python"><![CDATA['20170909'
nodes = hou.selectedNodes()
for node in nodes:
    geoname = node.name()
    geo = hou.node('/obj').createNode('geo', geoname)
    geo.setDisplayFlag(False)
    mantra = hou.node('/out').createNode('ifd', geoname)
    mantra.parm('forceobject').set(geoname)
    mantra.parm('vobject').set('')
    mantra.parm('alights').set('')
    objectnode = geo.createNode('object_merge', geoname)
    objectnode.parm('objpath1').set(node.path())
    childrens = geo.children()
    for children in childrens:
        if children.name() == 'file1':
            children.destroy()]]></script>
  </tool>

  <tool name="openpath0" label="Open Path" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from toolbar import *
openpath.main()]]></script>
  </tool>

  <tool name="set_ifd_path_NEG" label="Set IFD Path Neg" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from toolbar import *
setifdpath_NEG.main()]]></script>
  </tool>

  <tool name="base_name" label="Base Name" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[print hou.hipFile.basename()]]></script>
  </tool>

  <tool name="SubmitHoudiniToDeadline" label="SubmitHoudiniToDeadline" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import sys
import os
import subprocess
import traceback

def GetRepositoryPath(subdir = None):
    # On OSX, we look for the DEADLINE_PATH file. On other platforms, we use the environment variable.
    if os.path.exists( "/Users/Shared/Thinkbox/DEADLINE_PATH" ):
        with file( "/Users/Shared/Thinkbox/DEADLINE_PATH" ) as f: deadlineBin = f.read().strip()
        deadlineCommand = deadlineBin + "/deadlinecommand"
    else:
        try:
            deadlineBin = os.environ['DEADLINE_PATH']
        except KeyError:
            return ""
    
        if os.name == 'nt':
            deadlineCommand = deadlineBin + "\\deadlinecommand.exe"
        else:
            deadlineCommand = deadlineBin + "/deadlinecommand"
    
    startupinfo = None
    if os.name == 'nt':
        # Python 2.6 has subprocess.STARTF_USESHOWWINDOW, and Python 2.7 has subprocess._subprocess.STARTF_USESHOWWINDOW, so check for both.
        if hasattr( subprocess, '_subprocess' ) and hasattr( subprocess._subprocess, 'STARTF_USESHOWWINDOW' ):
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess._subprocess.STARTF_USESHOWWINDOW
        elif hasattr( subprocess, 'STARTF_USESHOWWINDOW' ):
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    
    args = [deadlineCommand, "-GetRepositoryPath "]   
    if subdir != None and subdir != "":
        args.append(subdir)

    proc = subprocess.Popen(args, cwd=deadlineBin, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=startupinfo)
    proc.stdin.close()
    proc.stderr.close()
    
    path = proc.stdout.read()
    path = path.replace("\n","").replace("\r","")
    return path

# Get the repository path
path = GetRepositoryPath("submission/Houdini/Main")
if path != "":
    path = path.replace( "\\", "/" )
    
    # Add the path to the system path
    if path not in sys.path :
        print "Appending \"" + path + "\" to system path to import SubmitHoudiniToDeadline module"
        sys.path.append( path )
    else:
        print( "\"%s\" is already in the system path" % path )

    # Import the script and call the main() function
    try:
        import SubmitHoudiniToDeadline
        SubmitHoudiniToDeadline.SubmitToDeadline( )
    except:
        print traceback.format_exc()
        print( "The SubmitHoudiniToDeadline.py script could not be found in the Deadline Repository. Please make sure that the Deadline Client has been installed on this machine, that the Deadline Client bin folder is set in the DEADLINE_PATH environment variable, and that the Deadline Client has been configured to point to a valid Repository." )
else:
    print( "The SubmitHoudiniToDeadline.py script could not be found in the Deadline Repository. Please make sure that the Deadline Client has been installed on this machine, that the Deadline Client bin folder is set in the DEADLINE_PATH environment variable, and that the Deadline Client has been configured to point to a valid Repository." )
]]></script>
  </tool>

  <tool name="rename" label="ReName" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()

for node in nodes:
    old_name = node.name()
    reold = hou.ui.readInput('old name', title='old name', buttons=(['OK']))[1]
    if reold != '':
        renew = hou.ui.readInput('new name', title='new name', buttons=(['OK']))[1]
        if renew != '' and reold in old_name:
            newname = old_name.replace(reold, renew)
            node.setName(newname)
        else:
            hou.ui.displayMessage('Error')]]></script>
  </tool>
</shelfDocument>
